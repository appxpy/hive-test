// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/interfaces.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/appxpy/hive-test/internal/entity"
	usecase "github.com/appxpy/hive-test/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserUseCase) Login(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUseCaseMockRecorder) Login(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), ctx, username, password)
}

// Register mocks base method.
func (m *MockUserUseCase) Register(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCaseMockRecorder) Register(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), ctx, username, password)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepo) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepoMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUsername), ctx, username)
}

// MockAssetUseCase is a mock of AssetUseCase interface.
type MockAssetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAssetUseCaseMockRecorder
}

// MockAssetUseCaseMockRecorder is the mock recorder for MockAssetUseCase.
type MockAssetUseCaseMockRecorder struct {
	mock *MockAssetUseCase
}

// NewMockAssetUseCase creates a new mock instance.
func NewMockAssetUseCase(ctrl *gomock.Controller) *MockAssetUseCase {
	mock := &MockAssetUseCase{ctrl: ctrl}
	mock.recorder = &MockAssetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetUseCase) EXPECT() *MockAssetUseCaseMockRecorder {
	return m.recorder
}

// AddAsset mocks base method.
func (m *MockAssetUseCase) AddAsset(ctx context.Context, asset *entity.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAsset", ctx, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAsset indicates an expected call of AddAsset.
func (mr *MockAssetUseCaseMockRecorder) AddAsset(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAsset", reflect.TypeOf((*MockAssetUseCase)(nil).AddAsset), ctx, asset)
}

// GetAssetsByUser mocks base method.
func (m *MockAssetUseCase) GetAssetsByUser(ctx context.Context, userID int64) ([]*entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetsByUser", ctx, userID)
	ret0, _ := ret[0].([]*entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetsByUser indicates an expected call of GetAssetsByUser.
func (mr *MockAssetUseCaseMockRecorder) GetAssetsByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetsByUser", reflect.TypeOf((*MockAssetUseCase)(nil).GetAssetsByUser), ctx, userID)
}

// PurchaseAsset mocks base method.
func (m *MockAssetUseCase) PurchaseAsset(ctx context.Context, assetID, buyerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseAsset", ctx, assetID, buyerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurchaseAsset indicates an expected call of PurchaseAsset.
func (mr *MockAssetUseCaseMockRecorder) PurchaseAsset(ctx, assetID, buyerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseAsset", reflect.TypeOf((*MockAssetUseCase)(nil).PurchaseAsset), ctx, assetID, buyerID)
}

// RemoveAsset mocks base method.
func (m *MockAssetUseCase) RemoveAsset(ctx context.Context, assetID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAsset", ctx, assetID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAsset indicates an expected call of RemoveAsset.
func (mr *MockAssetUseCaseMockRecorder) RemoveAsset(ctx, assetID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAsset", reflect.TypeOf((*MockAssetUseCase)(nil).RemoveAsset), ctx, assetID, userID)
}

// MockAssetRepo is a mock of AssetRepo interface.
type MockAssetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepoMockRecorder
}

// MockAssetRepoMockRecorder is the mock recorder for MockAssetRepo.
type MockAssetRepoMockRecorder struct {
	mock *MockAssetRepo
}

// NewMockAssetRepo creates a new mock instance.
func NewMockAssetRepo(ctrl *gomock.Controller) *MockAssetRepo {
	mock := &MockAssetRepo{ctrl: ctrl}
	mock.recorder = &MockAssetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepo) EXPECT() *MockAssetRepoMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockAssetRepo) CreateAsset(ctx context.Context, asset *entity.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", ctx, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetRepoMockRecorder) CreateAsset(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetRepo)(nil).CreateAsset), ctx, asset)
}

// DeleteAsset mocks base method.
func (m *MockAssetRepo) DeleteAsset(ctx context.Context, assetID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", ctx, assetID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockAssetRepoMockRecorder) DeleteAsset(ctx, assetID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockAssetRepo)(nil).DeleteAsset), ctx, assetID, userID)
}

// ExecuteTx mocks base method.
func (m *MockAssetRepo) ExecuteTx(ctx context.Context, fn func(usecase.AssetRepo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTx indicates an expected call of ExecuteTx.
func (mr *MockAssetRepoMockRecorder) ExecuteTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTx", reflect.TypeOf((*MockAssetRepo)(nil).ExecuteTx), ctx, fn)
}

// GetAssetByID mocks base method.
func (m *MockAssetRepo) GetAssetByID(ctx context.Context, assetID int64, forUpdate bool) (*entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByID", ctx, assetID, forUpdate)
	ret0, _ := ret[0].(*entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByID indicates an expected call of GetAssetByID.
func (mr *MockAssetRepoMockRecorder) GetAssetByID(ctx, assetID, forUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByID", reflect.TypeOf((*MockAssetRepo)(nil).GetAssetByID), ctx, assetID, forUpdate)
}

// GetAssetsByUserID mocks base method.
func (m *MockAssetRepo) GetAssetsByUserID(ctx context.Context, userID int64) ([]*entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetsByUserID indicates an expected call of GetAssetsByUserID.
func (mr *MockAssetRepoMockRecorder) GetAssetsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetsByUserID", reflect.TypeOf((*MockAssetRepo)(nil).GetAssetsByUserID), ctx, userID)
}

// UpdateAssetOwner mocks base method.
func (m *MockAssetRepo) UpdateAssetOwner(ctx context.Context, assetID, newOwnerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetOwner", ctx, assetID, newOwnerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssetOwner indicates an expected call of UpdateAssetOwner.
func (mr *MockAssetRepoMockRecorder) UpdateAssetOwner(ctx, assetID, newOwnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetOwner", reflect.TypeOf((*MockAssetRepo)(nil).UpdateAssetOwner), ctx, assetID, newOwnerID)
}
